var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DataWorkstation","category":"page"},{"location":"#DataWorkstation","page":"Home","title":"DataWorkstation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DataWorkstation.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DataWorkstation]\nPrivate = false\nOrder = [:type, :function]","category":"page"},{"location":"#Config-module","page":"Home","title":"Config module","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DataWorkstation.Config.ConfigObject\nDataWorkstation.Config.load_config\nDataWorkstation.Config.parse_config\nDataWorkstation.Config.update_config","category":"page"},{"location":"#DataWorkstation.Config.ConfigObject","page":"Home","title":"DataWorkstation.Config.ConfigObject","text":"ConfigObject(nt::NamedTuple)\nConfigObject(cfg::ConfigObject)\n\nAbstraction to manage configuration values in a program. Elements in the object being NamedTuple are converted to ConfigObject instances.\n\nFields\n\n_nt::NamedTuple: stores the keys and values for the configuration\n\nExamples\n\njulia> raw = (;a=1, b=(;c=3, d=4))\n(a = 1, b = (c = 3, d = 4))\n\njulia> cfg = ConfigObject(raw)\nConfigObject((a = 1, b = ConfigObject((c = 3, d = 4))))\n\njulia> cfg.b\nConfigObject((c = 3, d = 4))\n\njulia> cfg.b.d\n4\n\njulia> length(cfg)\n2\n\njulia> keys(cfg), values(cfg)\n((:a, :b), (1, ConfigObject((c = 3, d = 4))))\n\njulia> merge(cfg, (;e=5, f=6))\nConfigObject((a = 1, b = ConfigObject((c = 3, d = 4)), e = 5, f = 6))\n\njulia> cfg == ConfigObject(raw)\ntrue\n\njulia> collect(cfg)\n(a = 1, b = (c = 3, d = 4))\n\n\n\n\n\n","category":"type"},{"location":"#DataWorkstation.Config.load_config","page":"Home","title":"DataWorkstation.Config.load_config","text":"load_config(filename, root) -> ConfigObject\n\nLoad a file as a ConfigObject instance.\n\nArguments\n\nfilename::AbstractString: the path to load to get the configuration content\nroot::AbstractString: root for the path to load (optional)\n\nReturns\n\nConfigObject: having the content loaded from the file\n\nExamples\n\njulia> config_dict = Dict(\"a\" => 1, \"b\" => Dict(\"c\" => 2, \"d\" => 3))\nDict{String, Any} with 2 entries:\n  \"b\" => Dict(\"c\"=>2, \"d\"=>3)\n  \"a\" => 1\n\njulia> using TOML\n\njulia> filename = tempdir() * \"/cfg.toml\"\n\"/tmp/cfg.toml\"\n\njulia> open(filename, \"w\") do io\n       TOML.print(io, config_dict)\n       end;\n\njulia> load_config(filename)\nConfigObject((b = ConfigObject((c = 2, d = 3)), a = 1))\n\n\n\n\n\n","category":"function"},{"location":"#DataWorkstation.Config.parse_config","page":"Home","title":"DataWorkstation.Config.parse_config","text":"parse_config(d::Dict, root::AbstractString = \"\") -> ConfigObject\nparse_config(s::AbstractString, root) -> Union{ConfigObject, String}\n\nParse an input to build a ConfigObject instance. If the input is a Dict, the content will be converted into entries for a ConfigObject. If some entry contains a string of the kind \"filename.toml\", it is taken as a file to load as a ConfigObject.\n\nArguments\n\nd::Dict: the dict to convert to a ConfigObject instance\ns::AbstractString: when a value is a string with a format like \"filename.toml\",   the file is loaded from that path as a ConfigObject\nroot::AbstractString=\"\": in case of loading a file,   this is the root for the path to load (optional)\n\nReturns\n\nConfigObject: having the content parsed from the input\n\nExamples\n\njulia> config_dict = Dict(\"a\" => 1, \"b\" => Dict(\"c\" => 2, \"d\" => 3))\nDict{String, Any} with 2 entries:\n  \"b\" => Dict(\"c\"=>2, \"d\"=>3)\n  \"a\" => 1\n\njulia> parse_config(config_dict)\nConfigObject((b = ConfigObject((c = 2, d = 3)), a = 1))\n\njulia> using TOML\n\njulia> filename = tempdir() * \"/cfg.toml\"\n\"/tmp/cfg.toml\"\n\njulia> open(filename, \"w\") do io\n       TOML.print(io, config_dict)\n       end;\n\njulia> parse_config(Dict(\"cfg\" => \"\\$($(filename))\"))\nConfigObject((cfg = ConfigObject((b = ConfigObject((c = 2, d = 3)), a = 1)),))\n\n\n\n\n\n","category":"function"},{"location":"#DataWorkstation.Config.update_config","page":"Home","title":"DataWorkstation.Config.update_config","text":"update_config(cfg::ConfigObject, entries::NamedTuple) -> ConfigObject\n\nGet a new ConfigObject by updating the content with new entries\n\nArguments\n\ncfg::ConfigObject: configuration instance to updated\nentries::NamedTuple: new entries to put into the configuration instance\n\nReturns\n\nConfigObject: having updated entries\n\nExamples\n\njulia> raw = (;a=1, b=(;c=3, d=4))\n(a = 1, b = (c = 3, d = 4))\n\njulia> cfg = ConfigObject(raw)\nConfigObject((a = 1, b = ConfigObject((c = 3, d = 4))))\n\njulia> update_config(cfg, (;e=5, f=6))\nConfigObject((a = 1, b = ConfigObject((c = 3, d = 4)), e = 5, f = 6))\n\n\n\n\n\n","category":"function"}]
}
